name: Build & deploy

on:
  workflow_dispatch:
    inputs:
      publish:
        default: false
        description: Publish package
        required: false
        type: boolean
      pack:
        default: false
        description: Package and upload as an artifact
        required: false
        type: boolean

env:
  DOTNET_NOLOGO: true

jobs:
  build-linux-arm64:
    runs-on: ubuntu-arm64-2-core

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.403'
      - run: dotnet --version

      - name: Build Go ECDSA
        run: go build -ldflags="-s -w" -buildmode=c-shared -o runtimes/linux-arm64/native/secp256r1.so src/go-ecdsa/main.go

      - name: Test bindings
        run: dotnet test --os linux-arm64
        working-directory: ./src

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: runtimes/linux-arm64/native
          if-no-files-found: error

  build-linux-x64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.403'
      - run: dotnet --version

      - name: Build Go ECDSA
        run: go build -ldflags="-s -w" -buildmode=c-shared -o runtimes/linux-x64/native/secp256r1.so src/go-ecdsa/main.go

      - name: Test bindings
        run: dotnet test --os linux-x64
        working-directory: ./src

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: runtimes/linux-x64/native
          if-no-files-found: error

  build-osx-arm64:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.403'
      - run: dotnet --version

      - name: Build Go ECDSA
        run: go build -ldflags="-s -w" -buildmode=c-shared -o runtimes/osx-arm64/native/secp256r1.dylib src/go-ecdsa/main.go

      - name: Test bindings
        run: dotnet test --os osx-arm64
        working-directory: ./src

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: osx-arm64
          path: runtimes/osx-arm64/native
          if-no-files-found: error

  build-osx-x64:
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.403'
      - run: dotnet --version

      - name: Build Go ECDSA
        run: go build -ldflags="-s -w" -buildmode=c-shared -o runtimes/osx-x64/native/secp256r1.dylib src/go-ecdsa/main.go

      - name: Test bindings
        run: dotnet test --os osx-x64
        working-directory: ./src

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: osx-x64
          path: runtimes/osx-x64/native
          if-no-files-found: error

  build-win-x64:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.403'
      - run: dotnet --version

      - name: Build Go ECDSA
        run: |
          del runtimes\win-x64\native\secp256r1.dll >nul 2>&1
          go build -ldflags="-s -w" -buildmode=c-shared -o runtimes/win-x64/native/secp256r1.dll src/go-ecdsa/main.go

      - name: Test bindings
        run: dotnet test --os win-x64
        working-directory: ./src

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: win-x64
          path: runtimes/win-x64/native
          if-no-files-found: error

  package-nuget:
    runs-on: ubuntu-latest
    needs: [build-linux-arm64, build-linux-x64, build-osx-arm64, build-osx-x64, build-win-x64]
    env:
      BUILD_CONFIG: release
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download native binaries
        uses: actions/download-artifact@v4
        with:
          path: runtimes

      - name: Move binaries
        working-directory: runtimes
        run: |
          mkdir -p linux-arm64/native linux-x64/native osx-arm64/native osx-x64/native win-x64/native
          mv -f linux-arm64/secp256r1.so linux-arm64/native/secp256r1.so
          mv -f linux-x64/secp256r1.so linux-x64/native/secp256r1.so
          mv -f osx-arm64/secp256r1.dylib osx-arm64/native/secp256r1.dylib
          mv -f osx-x64/secp256r1.dylib osx-x64/native/secp256r1.dylib
          mv -f win-x64/secp256r1.dll win-x64/native/secp256r1.dll

      - name: Set up .NET
        uses: actions/setup-dotnet@v4

      - name: Install dependencies
        working-directory: src
        run: dotnet restore

      - name: Build
        working-directory: src/Nethermind.Crypto.SecP256r1
        run: dotnet build -c ${{ env.BUILD_CONFIG }} --no-restore

      - name: Test
        working-directory: src
        run: dotnet test

      - name: Create package
        if: ${{ inputs.pack || inputs.publish }}
        working-directory: src/Nethermind.Crypto.SecP256r1
        run: |
          dotnet pack -c ${{ env.BUILD_CONFIG }} --no-build

      - name: Upload package artifact
        if: ${{ inputs.pack }}
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: src/Nethermind.Crypto.SecP256r1/bin/${{ env.BUILD_CONFIG }}/*.nupkg
          if-no-files-found: error

      - name: Publish package
        if: ${{ inputs.publish }}
        working-directory: src/Nethermind.Crypto.SecP256r1
        run: |
          dotnet nuget push bin/${{ env.BUILD_CONFIG }}/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json